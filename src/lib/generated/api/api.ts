/* tslint:disable */
/* eslint-disable */
/**
 * Vendi Backend. Environment: STG
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseQuantitySchema
 */
export interface BaseQuantitySchema {
    /**
     * 
     * @type {number}
     * @memberof BaseQuantitySchema
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface BodyResetForgotPasswordApiAuthForgotPasswordPost
 */
export interface BodyResetForgotPasswordApiAuthForgotPasswordPost {
    /**
     * 
     * @type {string}
     * @memberof BodyResetForgotPasswordApiAuthForgotPasswordPost
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface BodyResetResetPasswordApiAuthResetPasswordPost
 */
export interface BodyResetResetPasswordApiAuthResetPasswordPost {
    /**
     * 
     * @type {string}
     * @memberof BodyResetResetPasswordApiAuthResetPasswordPost
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof BodyResetResetPasswordApiAuthResetPasswordPost
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
 */
export interface BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost {
    /**
     * 
     * @type {string}
     * @memberof BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface BodyVerifyVerifyApiAuthVerifyPost
 */
export interface BodyVerifyVerifyApiAuthVerifyPost {
    /**
     * 
     * @type {string}
     * @memberof BodyVerifyVerifyApiAuthVerifyPost
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface CategoryProductQuantitySchema
 */
export interface CategoryProductQuantitySchema {
    /**
     * 
     * @type {number}
     * @memberof CategoryProductQuantitySchema
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof CategoryProductQuantitySchema
     */
    'category_name': string;
}
/**
 * 
 * @export
 * @interface CategoryTimeFrameSalesSchema
 */
export interface CategoryTimeFrameSalesSchema {
    /**
     * 
     * @type {string}
     * @memberof CategoryTimeFrameSalesSchema
     */
    'category_name': string;
    /**
     * 
     * @type {Array<TimeFrameSalesSchema>}
     * @memberof CategoryTimeFrameSalesSchema
     */
    'sale_range': Array<TimeFrameSalesSchema>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DateRangeEnum = {
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month',
    Quarter: 'quarter',
    Year: 'year'
} as const;

export type DateRangeEnum = typeof DateRangeEnum[keyof typeof DateRangeEnum];


/**
 * 
 * @export
 * @interface DecimalQuantitySchema
 */
export interface DecimalQuantitySchema {
    /**
     * 
     * @type {number}
     * @memberof DecimalQuantitySchema
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface DecimalTimeFrameSalesSchema
 */
export interface DecimalTimeFrameSalesSchema {
    /**
     * 
     * @type {number}
     * @memberof DecimalTimeFrameSalesSchema
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof DecimalTimeFrameSalesSchema
     */
    'time_frame': string;
}
/**
 * 
 * @export
 * @interface Detail
 */
export interface Detail {
}
/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {Detail}
     * @memberof ErrorModel
     */
    'detail': Detail;
}
/**
 * 
 * @export
 * @interface GeographyCreateSchema
 */
export interface GeographyCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof GeographyCreateSchema
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GeographyCreateSchema
     */
    'postcode': string | null;
}
/**
 * 
 * @export
 * @interface GeographyDetailSchema
 */
export interface GeographyDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof GeographyDetailSchema
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GeographyDetailSchema
     */
    'postcode': string | null;
    /**
     * 
     * @type {number}
     * @memberof GeographyDetailSchema
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HealthCheckSchema
 */
export interface HealthCheckSchema {
    /**
     * 
     * @type {HealthCheckStatusEnum}
     * @memberof HealthCheckSchema
     */
    'status': HealthCheckStatusEnum;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const HealthCheckStatusEnum = {
    Success: 'Success',
    Failure: 'Failure'
} as const;

export type HealthCheckStatusEnum = typeof HealthCheckStatusEnum[keyof typeof HealthCheckStatusEnum];


/**
 * 
 * @export
 * @interface ImpressionCreateSchema
 */
export interface ImpressionCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof ImpressionCreateSchema
     */
    'date': string;
    /**
     * 
     * @type {TotalImpressions}
     * @memberof ImpressionCreateSchema
     */
    'total_impressions': TotalImpressions;
    /**
     * 
     * @type {number}
     * @memberof ImpressionCreateSchema
     */
    'temperature': number;
    /**
     * 
     * @type {number}
     * @memberof ImpressionCreateSchema
     */
    'rainfall': number;
    /**
     * 
     * @type {string}
     * @memberof ImpressionCreateSchema
     */
    'source_system'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionCreateSchema
     */
    'source_system_id': string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionCreateSchema
     */
    'device_number': string;
}
/**
 * 
 * @export
 * @interface ImpressionDetailSchema
 */
export interface ImpressionDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof ImpressionDetailSchema
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionDetailSchema
     */
    'total_impressions': string;
    /**
     * 
     * @type {number}
     * @memberof ImpressionDetailSchema
     */
    'temperature': number;
    /**
     * 
     * @type {number}
     * @memberof ImpressionDetailSchema
     */
    'rainfall': number;
    /**
     * 
     * @type {string}
     * @memberof ImpressionDetailSchema
     */
    'source_system'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionDetailSchema
     */
    'source_system_id': string;
    /**
     * 
     * @type {string}
     * @memberof ImpressionDetailSchema
     */
    'device_number': string;
    /**
     * 
     * @type {number}
     * @memberof ImpressionDetailSchema
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface MachineCreateSchema
 */
export interface MachineCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof MachineCreateSchema
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MachineCreateSchema
     */
    'geography_id': number;
}
/**
 * 
 * @export
 * @interface MachineDetailSchema
 */
export interface MachineDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof MachineDetailSchema
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof MachineDetailSchema
     */
    'geography_id': number;
    /**
     * 
     * @type {number}
     * @memberof MachineDetailSchema
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface MachineImpressionBulkCreateResponseSchema
 */
export interface MachineImpressionBulkCreateResponseSchema {
    /**
     * 
     * @type {number}
     * @memberof MachineImpressionBulkCreateResponseSchema
     */
    'initial_records': number;
    /**
     * 
     * @type {number}
     * @memberof MachineImpressionBulkCreateResponseSchema
     */
    'final_records': number;
    /**
     * 
     * @type {number}
     * @memberof MachineImpressionBulkCreateResponseSchema
     */
    'created_records': number;
}
/**
 * 
 * @export
 * @interface PageCustomizedCategoryProductQuantitySchema
 */
export interface PageCustomizedCategoryProductQuantitySchema {
    /**
     * 
     * @type {Array<CategoryProductQuantitySchema>}
     * @memberof PageCustomizedCategoryProductQuantitySchema
     */
    'items': Array<CategoryProductQuantitySchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryProductQuantitySchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryProductQuantitySchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryProductQuantitySchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryProductQuantitySchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedCategoryTimeFrameSalesSchema
 */
export interface PageCustomizedCategoryTimeFrameSalesSchema {
    /**
     * 
     * @type {Array<CategoryTimeFrameSalesSchema>}
     * @memberof PageCustomizedCategoryTimeFrameSalesSchema
     */
    'items': Array<CategoryTimeFrameSalesSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryTimeFrameSalesSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryTimeFrameSalesSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryTimeFrameSalesSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedCategoryTimeFrameSalesSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedDecimalTimeFrameSalesSchema
 */
export interface PageCustomizedDecimalTimeFrameSalesSchema {
    /**
     * 
     * @type {Array<DecimalTimeFrameSalesSchema>}
     * @memberof PageCustomizedDecimalTimeFrameSalesSchema
     */
    'items': Array<DecimalTimeFrameSalesSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedDecimalTimeFrameSalesSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedDecimalTimeFrameSalesSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedDecimalTimeFrameSalesSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedDecimalTimeFrameSalesSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedGeographyDetailSchema
 */
export interface PageCustomizedGeographyDetailSchema {
    /**
     * 
     * @type {Array<GeographyDetailSchema>}
     * @memberof PageCustomizedGeographyDetailSchema
     */
    'items': Array<GeographyDetailSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedGeographyDetailSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedGeographyDetailSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedGeographyDetailSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedGeographyDetailSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedImpressionDetailSchema
 */
export interface PageCustomizedImpressionDetailSchema {
    /**
     * 
     * @type {Array<ImpressionDetailSchema>}
     * @memberof PageCustomizedImpressionDetailSchema
     */
    'items': Array<ImpressionDetailSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedImpressionDetailSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedImpressionDetailSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedImpressionDetailSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedImpressionDetailSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedMachineDetailSchema
 */
export interface PageCustomizedMachineDetailSchema {
    /**
     * 
     * @type {Array<MachineDetailSchema>}
     * @memberof PageCustomizedMachineDetailSchema
     */
    'items': Array<MachineDetailSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedMachineDetailSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedMachineDetailSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedMachineDetailSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedMachineDetailSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedSaleDetailSchema
 */
export interface PageCustomizedSaleDetailSchema {
    /**
     * 
     * @type {Array<SaleDetailSchema>}
     * @memberof PageCustomizedSaleDetailSchema
     */
    'items': Array<SaleDetailSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedSaleDetailSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedSaleDetailSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedSaleDetailSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedSaleDetailSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedTimeFrameSalesSchema
 */
export interface PageCustomizedTimeFrameSalesSchema {
    /**
     * 
     * @type {Array<TimeFrameSalesSchema>}
     * @memberof PageCustomizedTimeFrameSalesSchema
     */
    'items': Array<TimeFrameSalesSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedTimeFrameSalesSchema
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedTimeFrameSalesSchema
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedTimeFrameSalesSchema
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedTimeFrameSalesSchema
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface PageCustomizedUserDetail
 */
export interface PageCustomizedUserDetail {
    /**
     * 
     * @type {Array<UserDetail>}
     * @memberof PageCustomizedUserDetail
     */
    'items': Array<UserDetail>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @interface ProductDetailSchema
 */
export interface ProductDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof ProductDetailSchema
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetailSchema
     */
    'price': string;
    /**
     * 
     * @type {number}
     * @memberof ProductDetailSchema
     */
    'product_category_id': number;
    /**
     * 
     * @type {number}
     * @memberof ProductDetailSchema
     */
    'id': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * 
 * @export
 * @interface SaleCreateSchema
 */
export interface SaleCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof SaleCreateSchema
     */
    'sale_date': string;
    /**
     * 
     * @type {string}
     * @memberof SaleCreateSchema
     */
    'sale_time': string;
    /**
     * 
     * @type {number}
     * @memberof SaleCreateSchema
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof SaleCreateSchema
     */
    'source_system'?: string;
    /**
     * 
     * @type {number}
     * @memberof SaleCreateSchema
     */
    'source_system_id': number;
    /**
     * 
     * @type {number}
     * @memberof SaleCreateSchema
     */
    'product_id': number;
    /**
     * 
     * @type {number}
     * @memberof SaleCreateSchema
     */
    'machine_id': number;
}
/**
 * 
 * @export
 * @interface SaleDetailSchema
 */
export interface SaleDetailSchema {
    /**
     * 
     * @type {string}
     * @memberof SaleDetailSchema
     */
    'sale_date': string;
    /**
     * 
     * @type {string}
     * @memberof SaleDetailSchema
     */
    'sale_time': string;
    /**
     * 
     * @type {number}
     * @memberof SaleDetailSchema
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof SaleDetailSchema
     */
    'source_system'?: string;
    /**
     * 
     * @type {number}
     * @memberof SaleDetailSchema
     */
    'source_system_id': number;
    /**
     * 
     * @type {number}
     * @memberof SaleDetailSchema
     */
    'product_id': number;
    /**
     * 
     * @type {number}
     * @memberof SaleDetailSchema
     */
    'machine_id': number;
    /**
     * 
     * @type {number}
     * @memberof SaleDetailSchema
     */
    'id': number;
    /**
     * 
     * @type {ProductDetailSchema}
     * @memberof SaleDetailSchema
     */
    'product': ProductDetailSchema;
    /**
     * 
     * @type {MachineDetailSchema}
     * @memberof SaleDetailSchema
     */
    'machine': MachineDetailSchema;
}
/**
 * This enum represents every account\'s status.
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Active: 'ACTIVE',
    Suspended: 'SUSPENDED',
    Deleted: 'DELETED'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface TimeFrameSalesSchema
 */
export interface TimeFrameSalesSchema {
    /**
     * 
     * @type {number}
     * @memberof TimeFrameSalesSchema
     */
    'quantity': number;
    /**
     * 
     * @type {string}
     * @memberof TimeFrameSalesSchema
     */
    'time_frame': string;
}
/**
 * 
 * @export
 * @interface TotalImpressions
 */
export interface TotalImpressions {
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'phone_number'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDetail
     */
    'id': number;
    /**
     * 
     * @type {StatusEnum}
     * @memberof UserDetail
     */
    'status': StatusEnum;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserDetail
     */
    'role': RoleEnum;
}


/**
 * 
 * @export
 * @interface UserLoginSchema
 */
export interface UserLoginSchema {
    /**
     * 
     * @type {string}
     * @memberof UserLoginSchema
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginSchema
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'phone_number'?: string | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthLoginApi - axios parameter creator
 * @export
 */
export const AuthLoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {UserLoginSchema} userLoginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLoginApiAuthLoginPost: async (userLoginSchema: UserLoginSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginSchema' is not null or undefined
            assertParamExists('authJwtLoginApiAuthLoginPost', 'userLoginSchema', userLoginSchema)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLogoutApiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthLoginApi - functional programming interface
 * @export
 */
export const AuthLoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthLoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {UserLoginSchema} userLoginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authJwtLoginApiAuthLoginPost(userLoginSchema: UserLoginSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authJwtLoginApiAuthLoginPost(userLoginSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthLoginApi.authJwtLoginApiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authJwtLogoutApiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthLoginApi.authJwtLogoutApiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthLoginApi - factory interface
 * @export
 */
export const AuthLoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthLoginApiFp(configuration)
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLoginApiAuthLoginPost(requestParameters: AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.authJwtLoginApiAuthLoginPost(requestParameters.userLoginSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.authJwtLogoutApiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authJwtLoginApiAuthLoginPost operation in AuthLoginApi.
 * @export
 * @interface AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest
 */
export interface AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest {
    /**
     * 
     * @type {UserLoginSchema}
     * @memberof AuthLoginApiAuthJwtLoginApiAuthLoginPost
     */
    readonly userLoginSchema: UserLoginSchema
}

/**
 * AuthLoginApi - object-oriented interface
 * @export
 * @class AuthLoginApi
 * @extends {BaseAPI}
 */
export class AuthLoginApi extends BaseAPI {
    /**
     * 
     * @summary Auth:Jwt.Login
     * @param {AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthLoginApi
     */
    public authJwtLoginApiAuthLoginPost(requestParameters: AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthLoginApiFp(this.configuration).authJwtLoginApiAuthLoginPost(requestParameters.userLoginSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auth:Jwt.Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthLoginApi
     */
    public authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthLoginApiFp(this.configuration).authJwtLogoutApiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthRegisterApi - axios parameter creator
 * @export
 */
export const AuthRegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register:Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterApiAuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerRegisterApiAuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthRegisterApi - functional programming interface
 * @export
 */
export const AuthRegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthRegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register:Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerRegisterApiAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerRegisterApiAuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthRegisterApi.registerRegisterApiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthRegisterApi - factory interface
 * @export
 */
export const AuthRegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthRegisterApiFp(configuration)
    return {
        /**
         * 
         * @summary Register:Register
         * @param {AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterApiAuthRegisterPost(requestParameters: AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.registerRegisterApiAuthRegisterPost(requestParameters.userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registerRegisterApiAuthRegisterPost operation in AuthRegisterApi.
 * @export
 * @interface AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest
 */
export interface AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest {
    /**
     * 
     * @type {UserCreate}
     * @memberof AuthRegisterApiRegisterRegisterApiAuthRegisterPost
     */
    readonly userCreate: UserCreate
}

/**
 * AuthRegisterApi - object-oriented interface
 * @export
 * @class AuthRegisterApi
 * @extends {BaseAPI}
 */
export class AuthRegisterApi extends BaseAPI {
    /**
     * 
     * @summary Register:Register
     * @param {AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthRegisterApi
     */
    public registerRegisterApiAuthRegisterPost(requestParameters: AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthRegisterApiFp(this.configuration).registerRegisterApiAuthRegisterPost(requestParameters.userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthResetPasswordApi - axios parameter creator
 * @export
 */
export const AuthResetPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {BodyResetForgotPasswordApiAuthForgotPasswordPost} bodyResetForgotPasswordApiAuthForgotPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetForgotPasswordApiAuthForgotPasswordPost: async (bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyResetForgotPasswordApiAuthForgotPasswordPost' is not null or undefined
            assertParamExists('resetForgotPasswordApiAuthForgotPasswordPost', 'bodyResetForgotPasswordApiAuthForgotPasswordPost', bodyResetForgotPasswordApiAuthForgotPasswordPost)
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyResetForgotPasswordApiAuthForgotPasswordPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {BodyResetResetPasswordApiAuthResetPasswordPost} bodyResetResetPasswordApiAuthResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetResetPasswordApiAuthResetPasswordPost: async (bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyResetResetPasswordApiAuthResetPasswordPost' is not null or undefined
            assertParamExists('resetResetPasswordApiAuthResetPasswordPost', 'bodyResetResetPasswordApiAuthResetPasswordPost', bodyResetResetPasswordApiAuthResetPasswordPost)
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyResetResetPasswordApiAuthResetPasswordPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthResetPasswordApi - functional programming interface
 * @export
 */
export const AuthResetPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthResetPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {BodyResetForgotPasswordApiAuthForgotPasswordPost} bodyResetForgotPasswordApiAuthForgotPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetForgotPasswordApiAuthForgotPasswordPost(bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetForgotPasswordApiAuthForgotPasswordPost(bodyResetForgotPasswordApiAuthForgotPasswordPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthResetPasswordApi.resetForgotPasswordApiAuthForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {BodyResetResetPasswordApiAuthResetPasswordPost} bodyResetResetPasswordApiAuthResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetResetPasswordApiAuthResetPasswordPost(bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetResetPasswordApiAuthResetPasswordPost(bodyResetResetPasswordApiAuthResetPasswordPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthResetPasswordApi.resetResetPasswordApiAuthResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthResetPasswordApi - factory interface
 * @export
 */
export const AuthResetPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthResetPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetForgotPasswordApiAuthForgotPasswordPost(requestParameters: AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetForgotPasswordApiAuthForgotPasswordPost(requestParameters.bodyResetForgotPasswordApiAuthForgotPasswordPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetResetPasswordApiAuthResetPasswordPost(requestParameters: AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetResetPasswordApiAuthResetPasswordPost(requestParameters.bodyResetResetPasswordApiAuthResetPasswordPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for resetForgotPasswordApiAuthForgotPasswordPost operation in AuthResetPasswordApi.
 * @export
 * @interface AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest
 */
export interface AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {BodyResetForgotPasswordApiAuthForgotPasswordPost}
     * @memberof AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPost
     */
    readonly bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost
}

/**
 * Request parameters for resetResetPasswordApiAuthResetPasswordPost operation in AuthResetPasswordApi.
 * @export
 * @interface AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest
 */
export interface AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {BodyResetResetPasswordApiAuthResetPasswordPost}
     * @memberof AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPost
     */
    readonly bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost
}

/**
 * AuthResetPasswordApi - object-oriented interface
 * @export
 * @class AuthResetPasswordApi
 * @extends {BaseAPI}
 */
export class AuthResetPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Reset:Forgot Password
     * @param {AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthResetPasswordApi
     */
    public resetForgotPasswordApiAuthForgotPasswordPost(requestParameters: AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthResetPasswordApiFp(this.configuration).resetForgotPasswordApiAuthForgotPasswordPost(requestParameters.bodyResetForgotPasswordApiAuthForgotPasswordPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset:Reset Password
     * @param {AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthResetPasswordApi
     */
    public resetResetPasswordApiAuthResetPasswordPost(requestParameters: AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthResetPasswordApiFp(this.configuration).resetResetPasswordApiAuthResetPasswordPost(requestParameters.bodyResetResetPasswordApiAuthResetPasswordPost, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthVerifyApi - axios parameter creator
 * @export
 */
export const AuthVerifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost} bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRequestTokenApiAuthRequestVerifyTokenPost: async (bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost' is not null or undefined
            assertParamExists('verifyRequestTokenApiAuthRequestVerifyTokenPost', 'bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost', bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost)
            const localVarPath = `/api/auth/request-verify-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {BodyVerifyVerifyApiAuthVerifyPost} bodyVerifyVerifyApiAuthVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyVerifyApiAuthVerifyPost: async (bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyVerifyVerifyApiAuthVerifyPost' is not null or undefined
            assertParamExists('verifyVerifyApiAuthVerifyPost', 'bodyVerifyVerifyApiAuthVerifyPost', bodyVerifyVerifyApiAuthVerifyPost)
            const localVarPath = `/api/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyVerifyVerifyApiAuthVerifyPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthVerifyApi - functional programming interface
 * @export
 */
export const AuthVerifyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthVerifyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost} bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRequestTokenApiAuthRequestVerifyTokenPost(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRequestTokenApiAuthRequestVerifyTokenPost(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthVerifyApi.verifyRequestTokenApiAuthRequestVerifyTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {BodyVerifyVerifyApiAuthVerifyPost} bodyVerifyVerifyApiAuthVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyVerifyApiAuthVerifyPost(bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyVerifyApiAuthVerifyPost(bodyVerifyVerifyApiAuthVerifyPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthVerifyApi.verifyVerifyApiAuthVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthVerifyApi - factory interface
 * @export
 */
export const AuthVerifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthVerifyApiFp(configuration)
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters: AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters.bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyVerifyApiAuthVerifyPost(requestParameters: AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.verifyVerifyApiAuthVerifyPost(requestParameters.bodyVerifyVerifyApiAuthVerifyPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verifyRequestTokenApiAuthRequestVerifyTokenPost operation in AuthVerifyApi.
 * @export
 * @interface AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest
 */
export interface AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest {
    /**
     * 
     * @type {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost}
     * @memberof AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPost
     */
    readonly bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
}

/**
 * Request parameters for verifyVerifyApiAuthVerifyPost operation in AuthVerifyApi.
 * @export
 * @interface AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest
 */
export interface AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest {
    /**
     * 
     * @type {BodyVerifyVerifyApiAuthVerifyPost}
     * @memberof AuthVerifyApiVerifyVerifyApiAuthVerifyPost
     */
    readonly bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost
}

/**
 * AuthVerifyApi - object-oriented interface
 * @export
 * @class AuthVerifyApi
 * @extends {BaseAPI}
 */
export class AuthVerifyApi extends BaseAPI {
    /**
     * 
     * @summary Verify:Request-Token
     * @param {AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthVerifyApi
     */
    public verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters: AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest, options?: RawAxiosRequestConfig) {
        return AuthVerifyApiFp(this.configuration).verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters.bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify:Verify
     * @param {AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthVerifyApi
     */
    public verifyVerifyApiAuthVerifyPost(requestParameters: AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return AuthVerifyApiFp(this.configuration).verifyVerifyApiAuthVerifyPost(requestParameters.bodyVerifyVerifyApiAuthVerifyPost, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GeographiesApi - axios parameter creator
 * @export
 */
export const GeographiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [name] 
         * @param {string | null} [postcode] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyGet: async (idIn?: string | null, name?: string | null, postcode?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/geography`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [name] 
         * @param {string | null} [postcode] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyGet_1: async (idIn?: string | null, name?: string | null, postcode?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/geography`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdDelete: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdDelete', 'objId', objId)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdDelete_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdDelete_2', 'objId', objId)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdGet_3: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdGet_3', 'objId', objId)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdPatch: async (objId: number, geographyCreateSchema: GeographyCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdPatch', 'objId', objId)
            // verify required parameter 'geographyCreateSchema' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdPatch', 'geographyCreateSchema', geographyCreateSchema)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(geographyCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdPatch_4: async (objId: number, geographyCreateSchema: GeographyCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdPatch_4', 'objId', objId)
            // verify required parameter 'geographyCreateSchema' is not null or undefined
            assertParamExists('partialApiV1GeographyObjIdPatch_4', 'geographyCreateSchema', geographyCreateSchema)
            const localVarPath = `/api/v1/geography/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(geographyCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyPost: async (geographyCreateSchema: GeographyCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'geographyCreateSchema' is not null or undefined
            assertParamExists('partialApiV1GeographyPost', 'geographyCreateSchema', geographyCreateSchema)
            const localVarPath = `/api/v1/geography`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(geographyCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyPost_5: async (geographyCreateSchema: GeographyCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'geographyCreateSchema' is not null or undefined
            assertParamExists('partialApiV1GeographyPost_5', 'geographyCreateSchema', geographyCreateSchema)
            const localVarPath = `/api/v1/geography`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(geographyCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeographiesApi - functional programming interface
 * @export
 */
export const GeographiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeographiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [name] 
         * @param {string | null} [postcode] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyGet(idIn?: string | null, name?: string | null, postcode?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedGeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyGet(idIn, name, postcode, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [name] 
         * @param {string | null} [postcode] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyGet_1(idIn?: string | null, name?: string | null, postcode?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedGeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyGet_1(idIn, name, postcode, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdDelete(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdDelete(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdDelete_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdDelete_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdGet_3(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdGet_3(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdPatch(objId: number, geographyCreateSchema: GeographyCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdPatch(objId, geographyCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyObjIdPatch_4(objId: number, geographyCreateSchema: GeographyCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyObjIdPatch_4(objId, geographyCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyObjIdPatch_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyPost(geographyCreateSchema: GeographyCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyPost(geographyCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographyCreateSchema} geographyCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1GeographyPost_5(geographyCreateSchema: GeographyCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeographyDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1GeographyPost_5(geographyCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GeographiesApi.partialApiV1GeographyPost_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GeographiesApi - factory interface
 * @export
 */
export const GeographiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeographiesApiFp(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {GeographiesApiPartialApiV1GeographyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyGet(requestParameters: GeographiesApiPartialApiV1GeographyGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedGeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyGet(requestParameters.idIn, requestParameters.name, requestParameters.postcode, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {GeographiesApiPartialApiV1GeographyGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyGet_1(requestParameters: GeographiesApiPartialApiV1GeographyGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedGeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyGet_1(requestParameters.idIn, requestParameters.name, requestParameters.postcode, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdDelete(requestParameters: GeographiesApiPartialApiV1GeographyObjIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1GeographyObjIdDelete(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdDelete0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdDelete_2(requestParameters: GeographiesApiPartialApiV1GeographyObjIdDelete0Request, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1GeographyObjIdDelete_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdGet(requestParameters: GeographiesApiPartialApiV1GeographyObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdGet_3(requestParameters: GeographiesApiPartialApiV1GeographyObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyObjIdGet_3(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdPatch(requestParameters: GeographiesApiPartialApiV1GeographyObjIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyObjIdPatch(requestParameters.objId, requestParameters.geographyCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {GeographiesApiPartialApiV1GeographyObjIdPatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyObjIdPatch_4(requestParameters: GeographiesApiPartialApiV1GeographyObjIdPatch0Request, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyObjIdPatch_4(requestParameters.objId, requestParameters.geographyCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographiesApiPartialApiV1GeographyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyPost(requestParameters: GeographiesApiPartialApiV1GeographyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyPost(requestParameters.geographyCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {GeographiesApiPartialApiV1GeographyPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1GeographyPost_5(requestParameters: GeographiesApiPartialApiV1GeographyPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<GeographyDetailSchema> {
            return localVarFp.partialApiV1GeographyPost_5(requestParameters.geographyCreateSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partialApiV1GeographyGet operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyGetRequest
 */
export interface GeographiesApiPartialApiV1GeographyGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly name?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly postcode?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1GeographyGet_1 operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyGet0Request
 */
export interface GeographiesApiPartialApiV1GeographyGet0Request {
    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly name?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly postcode?: string | null

    /**
     * 
     * @type {string}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1GeographyObjIdDelete operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdDeleteRequest
 */
export interface GeographiesApiPartialApiV1GeographyObjIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdDelete
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1GeographyObjIdDelete_2 operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdDelete0Request
 */
export interface GeographiesApiPartialApiV1GeographyObjIdDelete0Request {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdDelete0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1GeographyObjIdGet operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdGetRequest
 */
export interface GeographiesApiPartialApiV1GeographyObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1GeographyObjIdGet_3 operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdGet0Request
 */
export interface GeographiesApiPartialApiV1GeographyObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1GeographyObjIdPatch operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdPatchRequest
 */
export interface GeographiesApiPartialApiV1GeographyObjIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdPatch
     */
    readonly objId: number

    /**
     * 
     * @type {GeographyCreateSchema}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdPatch
     */
    readonly geographyCreateSchema: GeographyCreateSchema
}

/**
 * Request parameters for partialApiV1GeographyObjIdPatch_4 operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyObjIdPatch0Request
 */
export interface GeographiesApiPartialApiV1GeographyObjIdPatch0Request {
    /**
     * 
     * @type {number}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdPatch0
     */
    readonly objId: number

    /**
     * 
     * @type {GeographyCreateSchema}
     * @memberof GeographiesApiPartialApiV1GeographyObjIdPatch0
     */
    readonly geographyCreateSchema: GeographyCreateSchema
}

/**
 * Request parameters for partialApiV1GeographyPost operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyPostRequest
 */
export interface GeographiesApiPartialApiV1GeographyPostRequest {
    /**
     * 
     * @type {GeographyCreateSchema}
     * @memberof GeographiesApiPartialApiV1GeographyPost
     */
    readonly geographyCreateSchema: GeographyCreateSchema
}

/**
 * Request parameters for partialApiV1GeographyPost_5 operation in GeographiesApi.
 * @export
 * @interface GeographiesApiPartialApiV1GeographyPost0Request
 */
export interface GeographiesApiPartialApiV1GeographyPost0Request {
    /**
     * 
     * @type {GeographyCreateSchema}
     * @memberof GeographiesApiPartialApiV1GeographyPost0
     */
    readonly geographyCreateSchema: GeographyCreateSchema
}

/**
 * GeographiesApi - object-oriented interface
 * @export
 * @class GeographiesApi
 * @extends {BaseAPI}
 */
export class GeographiesApi extends BaseAPI {
    /**
     * Get all objects
     * @summary Get all objects
     * @param {GeographiesApiPartialApiV1GeographyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyGet(requestParameters: GeographiesApiPartialApiV1GeographyGetRequest = {}, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyGet(requestParameters.idIn, requestParameters.name, requestParameters.postcode, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {GeographiesApiPartialApiV1GeographyGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyGet_1(requestParameters: GeographiesApiPartialApiV1GeographyGet0Request = {}, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyGet_1(requestParameters.idIn, requestParameters.name, requestParameters.postcode, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdDelete(requestParameters: GeographiesApiPartialApiV1GeographyObjIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdDelete(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdDelete0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdDelete_2(requestParameters: GeographiesApiPartialApiV1GeographyObjIdDelete0Request, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdDelete_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdGet(requestParameters: GeographiesApiPartialApiV1GeographyObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdGet_3(requestParameters: GeographiesApiPartialApiV1GeographyObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdGet_3(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdPatch(requestParameters: GeographiesApiPartialApiV1GeographyObjIdPatchRequest, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdPatch(requestParameters.objId, requestParameters.geographyCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {GeographiesApiPartialApiV1GeographyObjIdPatch0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyObjIdPatch_4(requestParameters: GeographiesApiPartialApiV1GeographyObjIdPatch0Request, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyObjIdPatch_4(requestParameters.objId, requestParameters.geographyCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {GeographiesApiPartialApiV1GeographyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyPost(requestParameters: GeographiesApiPartialApiV1GeographyPostRequest, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyPost(requestParameters.geographyCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {GeographiesApiPartialApiV1GeographyPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeographiesApi
     */
    public partialApiV1GeographyPost_5(requestParameters: GeographiesApiPartialApiV1GeographyPost0Request, options?: RawAxiosRequestConfig) {
        return GeographiesApiFp(this.configuration).partialApiV1GeographyPost_5(requestParameters.geographyCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performHealthcheckApiHealthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health-check/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performHealthcheckApiHealthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.performHealthcheckApiHealthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckSchema> {
            return localVarFp.performHealthcheckApiHealthCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @summary Perform Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).performHealthcheckApiHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImpressionsApi - axios parameter creator
 * @export
 */
export const ImpressionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [totalImpressions] 
         * @param {number | null} [temperature] 
         * @param {number | null} [rainfall] 
         * @param {string | null} [sourceSystem] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionGet: async (idIn?: string | null, dateFrom?: string | null, dateTo?: string | null, totalImpressions?: number | null, temperature?: number | null, rainfall?: number | null, sourceSystem?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/impression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (totalImpressions !== undefined) {
                localVarQueryParameter['total_impressions'] = totalImpressions;
            }

            if (temperature !== undefined) {
                localVarQueryParameter['temperature'] = temperature;
            }

            if (rainfall !== undefined) {
                localVarQueryParameter['rainfall'] = rainfall;
            }

            if (sourceSystem !== undefined) {
                localVarQueryParameter['source_system'] = sourceSystem;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [totalImpressions] 
         * @param {number | null} [temperature] 
         * @param {number | null} [rainfall] 
         * @param {string | null} [sourceSystem] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionGet_1: async (idIn?: string | null, dateFrom?: string | null, dateTo?: string | null, totalImpressions?: number | null, temperature?: number | null, rainfall?: number | null, sourceSystem?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/impression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString().substring(0,10) :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString().substring(0,10) :
                    dateTo;
            }

            if (totalImpressions !== undefined) {
                localVarQueryParameter['total_impressions'] = totalImpressions;
            }

            if (temperature !== undefined) {
                localVarQueryParameter['temperature'] = temperature;
            }

            if (rainfall !== undefined) {
                localVarQueryParameter['rainfall'] = rainfall;
            }

            if (sourceSystem !== undefined) {
                localVarQueryParameter['source_system'] = sourceSystem;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdDelete: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdDelete', 'objId', objId)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdDelete_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdDelete_2', 'objId', objId)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdGet_3: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdGet_3', 'objId', objId)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdPatch: async (objId: number, impressionCreateSchema: ImpressionCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdPatch', 'objId', objId)
            // verify required parameter 'impressionCreateSchema' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdPatch', 'impressionCreateSchema', impressionCreateSchema)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(impressionCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdPatch_4: async (objId: number, impressionCreateSchema: ImpressionCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdPatch_4', 'objId', objId)
            // verify required parameter 'impressionCreateSchema' is not null or undefined
            assertParamExists('partialApiV1ImpressionObjIdPatch_4', 'impressionCreateSchema', impressionCreateSchema)
            const localVarPath = `/api/v1/impression/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(impressionCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionPost: async (impressionCreateSchema: ImpressionCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'impressionCreateSchema' is not null or undefined
            assertParamExists('partialApiV1ImpressionPost', 'impressionCreateSchema', impressionCreateSchema)
            const localVarPath = `/api/v1/impression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(impressionCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionPost_5: async (impressionCreateSchema: ImpressionCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'impressionCreateSchema' is not null or undefined
            assertParamExists('partialApiV1ImpressionPost_5', 'impressionCreateSchema', impressionCreateSchema)
            const localVarPath = `/api/v1/impression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(impressionCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImpressionsApi - functional programming interface
 * @export
 */
export const ImpressionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImpressionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [totalImpressions] 
         * @param {number | null} [temperature] 
         * @param {number | null} [rainfall] 
         * @param {string | null} [sourceSystem] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionGet(idIn?: string | null, dateFrom?: string | null, dateTo?: string | null, totalImpressions?: number | null, temperature?: number | null, rainfall?: number | null, sourceSystem?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionGet(idIn, dateFrom, dateTo, totalImpressions, temperature, rainfall, sourceSystem, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [totalImpressions] 
         * @param {number | null} [temperature] 
         * @param {number | null} [rainfall] 
         * @param {string | null} [sourceSystem] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionGet_1(idIn?: string | null, dateFrom?: string | null, dateTo?: string | null, totalImpressions?: number | null, temperature?: number | null, rainfall?: number | null, sourceSystem?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionGet_1(idIn, dateFrom, dateTo, totalImpressions, temperature, rainfall, sourceSystem, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdDelete(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdDelete(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdDelete_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdDelete_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdGet_3(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdGet_3(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdPatch(objId: number, impressionCreateSchema: ImpressionCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdPatch(objId, impressionCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionObjIdPatch_4(objId: number, impressionCreateSchema: ImpressionCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionObjIdPatch_4(objId, impressionCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionObjIdPatch_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionPost(impressionCreateSchema: ImpressionCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionPost(impressionCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionCreateSchema} impressionCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1ImpressionPost_5(impressionCreateSchema: ImpressionCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImpressionDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1ImpressionPost_5(impressionCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImpressionsApi.partialApiV1ImpressionPost_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImpressionsApi - factory interface
 * @export
 */
export const ImpressionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImpressionsApiFp(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {ImpressionsApiPartialApiV1ImpressionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionGet(requestParameters: ImpressionsApiPartialApiV1ImpressionGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionGet(requestParameters.idIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.totalImpressions, requestParameters.temperature, requestParameters.rainfall, requestParameters.sourceSystem, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {ImpressionsApiPartialApiV1ImpressionGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionGet_1(requestParameters: ImpressionsApiPartialApiV1ImpressionGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionGet_1(requestParameters.idIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.totalImpressions, requestParameters.temperature, requestParameters.rainfall, requestParameters.sourceSystem, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdDelete(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1ImpressionObjIdDelete(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdDelete_2(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1ImpressionObjIdDelete_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdGet(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdGet_3(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionObjIdGet_3(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdPatch(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionObjIdPatch(requestParameters.objId, requestParameters.impressionCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionObjIdPatch_4(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionObjIdPatch_4(requestParameters.objId, requestParameters.impressionCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionsApiPartialApiV1ImpressionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionPost(requestParameters: ImpressionsApiPartialApiV1ImpressionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionPost(requestParameters.impressionCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {ImpressionsApiPartialApiV1ImpressionPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1ImpressionPost_5(requestParameters: ImpressionsApiPartialApiV1ImpressionPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<ImpressionDetailSchema> {
            return localVarFp.partialApiV1ImpressionPost_5(requestParameters.impressionCreateSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partialApiV1ImpressionGet operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionGetRequest
 */
export interface ImpressionsApiPartialApiV1ImpressionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly totalImpressions?: number | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly temperature?: number | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly rainfall?: number | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly sourceSystem?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1ImpressionGet_1 operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionGet0Request
 */
export interface ImpressionsApiPartialApiV1ImpressionGet0Request {
    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly totalImpressions?: number | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly temperature?: number | null

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly rainfall?: number | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly sourceSystem?: string | null

    /**
     * 
     * @type {string}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1ImpressionObjIdDelete operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdDelete
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1ImpressionObjIdDelete_2 operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdDelete0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1ImpressionObjIdGet operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdGetRequest
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1ImpressionObjIdGet_3 operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdGet0Request
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1ImpressionObjIdPatch operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdPatch
     */
    readonly objId: number

    /**
     * 
     * @type {ImpressionCreateSchema}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdPatch
     */
    readonly impressionCreateSchema: ImpressionCreateSchema
}

/**
 * Request parameters for partialApiV1ImpressionObjIdPatch_4 operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request
 */
export interface ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request {
    /**
     * 
     * @type {number}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdPatch0
     */
    readonly objId: number

    /**
     * 
     * @type {ImpressionCreateSchema}
     * @memberof ImpressionsApiPartialApiV1ImpressionObjIdPatch0
     */
    readonly impressionCreateSchema: ImpressionCreateSchema
}

/**
 * Request parameters for partialApiV1ImpressionPost operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionPostRequest
 */
export interface ImpressionsApiPartialApiV1ImpressionPostRequest {
    /**
     * 
     * @type {ImpressionCreateSchema}
     * @memberof ImpressionsApiPartialApiV1ImpressionPost
     */
    readonly impressionCreateSchema: ImpressionCreateSchema
}

/**
 * Request parameters for partialApiV1ImpressionPost_5 operation in ImpressionsApi.
 * @export
 * @interface ImpressionsApiPartialApiV1ImpressionPost0Request
 */
export interface ImpressionsApiPartialApiV1ImpressionPost0Request {
    /**
     * 
     * @type {ImpressionCreateSchema}
     * @memberof ImpressionsApiPartialApiV1ImpressionPost0
     */
    readonly impressionCreateSchema: ImpressionCreateSchema
}

/**
 * ImpressionsApi - object-oriented interface
 * @export
 * @class ImpressionsApi
 * @extends {BaseAPI}
 */
export class ImpressionsApi extends BaseAPI {
    /**
     * Get all objects
     * @summary Get all objects
     * @param {ImpressionsApiPartialApiV1ImpressionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionGet(requestParameters: ImpressionsApiPartialApiV1ImpressionGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionGet(requestParameters.idIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.totalImpressions, requestParameters.temperature, requestParameters.rainfall, requestParameters.sourceSystem, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {ImpressionsApiPartialApiV1ImpressionGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionGet_1(requestParameters: ImpressionsApiPartialApiV1ImpressionGet0Request = {}, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionGet_1(requestParameters.idIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.totalImpressions, requestParameters.temperature, requestParameters.rainfall, requestParameters.sourceSystem, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdDelete(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdDelete(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdDelete_2(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdDelete0Request, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdDelete_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdGet(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdGet_3(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdGet_3(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdPatch(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdPatch(requestParameters.objId, requestParameters.impressionCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionObjIdPatch_4(requestParameters: ImpressionsApiPartialApiV1ImpressionObjIdPatch0Request, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionObjIdPatch_4(requestParameters.objId, requestParameters.impressionCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {ImpressionsApiPartialApiV1ImpressionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionPost(requestParameters: ImpressionsApiPartialApiV1ImpressionPostRequest, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionPost(requestParameters.impressionCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {ImpressionsApiPartialApiV1ImpressionPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImpressionsApi
     */
    public partialApiV1ImpressionPost_5(requestParameters: ImpressionsApiPartialApiV1ImpressionPost0Request, options?: RawAxiosRequestConfig) {
        return ImpressionsApiFp(this.configuration).partialApiV1ImpressionPost_5(requestParameters.impressionCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MachineImpressionApi - axios parameter creator
 * @export
 */
export const MachineImpressionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Import Machine Impression
         * @param {File} providedFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMachineImpressionApiV1MachineImportPost: async (providedFile: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providedFile' is not null or undefined
            assertParamExists('importMachineImpressionApiV1MachineImportPost', 'providedFile', providedFile)
            const localVarPath = `/api/v1/machine/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


            if (providedFile !== undefined) { 
                localVarFormParams.append('provided_file', providedFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MachineImpressionApi - functional programming interface
 * @export
 */
export const MachineImpressionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MachineImpressionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Import Machine Impression
         * @param {File} providedFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importMachineImpressionApiV1MachineImportPost(providedFile: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineImpressionBulkCreateResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importMachineImpressionApiV1MachineImportPost(providedFile, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachineImpressionApi.importMachineImpressionApiV1MachineImportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MachineImpressionApi - factory interface
 * @export
 */
export const MachineImpressionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MachineImpressionApiFp(configuration)
    return {
        /**
         * 
         * @summary Import Machine Impression
         * @param {MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importMachineImpressionApiV1MachineImportPost(requestParameters: MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MachineImpressionBulkCreateResponseSchema> {
            return localVarFp.importMachineImpressionApiV1MachineImportPost(requestParameters.providedFile, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for importMachineImpressionApiV1MachineImportPost operation in MachineImpressionApi.
 * @export
 * @interface MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest
 */
export interface MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest {
    /**
     * 
     * @type {File}
     * @memberof MachineImpressionApiImportMachineImpressionApiV1MachineImportPost
     */
    readonly providedFile: File
}

/**
 * MachineImpressionApi - object-oriented interface
 * @export
 * @class MachineImpressionApi
 * @extends {BaseAPI}
 */
export class MachineImpressionApi extends BaseAPI {
    /**
     * 
     * @summary Import Machine Impression
     * @param {MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachineImpressionApi
     */
    public importMachineImpressionApiV1MachineImportPost(requestParameters: MachineImpressionApiImportMachineImpressionApiV1MachineImportPostRequest, options?: RawAxiosRequestConfig) {
        return MachineImpressionApiFp(this.configuration).importMachineImpressionApiV1MachineImportPost(requestParameters.providedFile, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MachinesApi - axios parameter creator
 * @export
 */
export const MachinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [name] 
         * @param {number | null} [geographyId] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineGet: async (idIn?: string | null, geographyIdIn?: string | null, name?: string | null, geographyId?: number | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (geographyId !== undefined) {
                localVarQueryParameter['geography_id'] = geographyId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [name] 
         * @param {number | null} [geographyId] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineGet_1: async (idIn?: string | null, geographyIdIn?: string | null, name?: string | null, geographyId?: number | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (geographyId !== undefined) {
                localVarQueryParameter['geography_id'] = geographyId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdDelete: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdDelete', 'objId', objId)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdDelete_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdDelete_2', 'objId', objId)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdGet_3: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdGet_3', 'objId', objId)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdPatch: async (objId: number, machineCreateSchema: MachineCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdPatch', 'objId', objId)
            // verify required parameter 'machineCreateSchema' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdPatch', 'machineCreateSchema', machineCreateSchema)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(machineCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdPatch_4: async (objId: number, machineCreateSchema: MachineCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdPatch_4', 'objId', objId)
            // verify required parameter 'machineCreateSchema' is not null or undefined
            assertParamExists('partialApiV1MachineObjIdPatch_4', 'machineCreateSchema', machineCreateSchema)
            const localVarPath = `/api/v1/machine/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(machineCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachinePost: async (machineCreateSchema: MachineCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'machineCreateSchema' is not null or undefined
            assertParamExists('partialApiV1MachinePost', 'machineCreateSchema', machineCreateSchema)
            const localVarPath = `/api/v1/machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(machineCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachinePost_5: async (machineCreateSchema: MachineCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'machineCreateSchema' is not null or undefined
            assertParamExists('partialApiV1MachinePost_5', 'machineCreateSchema', machineCreateSchema)
            const localVarPath = `/api/v1/machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(machineCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MachinesApi - functional programming interface
 * @export
 */
export const MachinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MachinesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [name] 
         * @param {number | null} [geographyId] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineGet(idIn?: string | null, geographyIdIn?: string | null, name?: string | null, geographyId?: number | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedMachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineGet(idIn, geographyIdIn, name, geographyId, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [name] 
         * @param {number | null} [geographyId] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineGet_1(idIn?: string | null, geographyIdIn?: string | null, name?: string | null, geographyId?: number | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedMachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineGet_1(idIn, geographyIdIn, name, geographyId, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdDelete(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdDelete(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdDelete_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdDelete_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdGet_3(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdGet_3(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdPatch(objId: number, machineCreateSchema: MachineCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdPatch(objId, machineCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachineObjIdPatch_4(objId: number, machineCreateSchema: MachineCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachineObjIdPatch_4(objId, machineCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachineObjIdPatch_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachinePost(machineCreateSchema: MachineCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachinePost(machineCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachinePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachineCreateSchema} machineCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1MachinePost_5(machineCreateSchema: MachineCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MachineDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1MachinePost_5(machineCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MachinesApi.partialApiV1MachinePost_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MachinesApi - factory interface
 * @export
 */
export const MachinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MachinesApiFp(configuration)
    return {
        /**
         * Get all objects
         * @summary Get all objects
         * @param {MachinesApiPartialApiV1MachineGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineGet(requestParameters: MachinesApiPartialApiV1MachineGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedMachineDetailSchema> {
            return localVarFp.partialApiV1MachineGet(requestParameters.idIn, requestParameters.geographyIdIn, requestParameters.name, requestParameters.geographyId, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {MachinesApiPartialApiV1MachineGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineGet_1(requestParameters: MachinesApiPartialApiV1MachineGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedMachineDetailSchema> {
            return localVarFp.partialApiV1MachineGet_1(requestParameters.idIn, requestParameters.geographyIdIn, requestParameters.name, requestParameters.geographyId, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdDelete(requestParameters: MachinesApiPartialApiV1MachineObjIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1MachineObjIdDelete(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdDelete0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdDelete_2(requestParameters: MachinesApiPartialApiV1MachineObjIdDelete0Request, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1MachineObjIdDelete_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdGet(requestParameters: MachinesApiPartialApiV1MachineObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachineObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdGet_3(requestParameters: MachinesApiPartialApiV1MachineObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachineObjIdGet_3(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdPatch(requestParameters: MachinesApiPartialApiV1MachineObjIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachineObjIdPatch(requestParameters.objId, requestParameters.machineCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {MachinesApiPartialApiV1MachineObjIdPatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachineObjIdPatch_4(requestParameters: MachinesApiPartialApiV1MachineObjIdPatch0Request, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachineObjIdPatch_4(requestParameters.objId, requestParameters.machineCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachinesApiPartialApiV1MachinePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachinePost(requestParameters: MachinesApiPartialApiV1MachinePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachinePost(requestParameters.machineCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {MachinesApiPartialApiV1MachinePost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1MachinePost_5(requestParameters: MachinesApiPartialApiV1MachinePost0Request, options?: RawAxiosRequestConfig): AxiosPromise<MachineDetailSchema> {
            return localVarFp.partialApiV1MachinePost_5(requestParameters.machineCreateSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partialApiV1MachineGet operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineGetRequest
 */
export interface MachinesApiPartialApiV1MachineGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly name?: string | null

    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly geographyId?: number | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1MachineGet_1 operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineGet0Request
 */
export interface MachinesApiPartialApiV1MachineGet0Request {
    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly name?: string | null

    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly geographyId?: number | null

    /**
     * 
     * @type {string}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1MachineObjIdDelete operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdDeleteRequest
 */
export interface MachinesApiPartialApiV1MachineObjIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdDelete
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1MachineObjIdDelete_2 operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdDelete0Request
 */
export interface MachinesApiPartialApiV1MachineObjIdDelete0Request {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdDelete0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1MachineObjIdGet operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdGetRequest
 */
export interface MachinesApiPartialApiV1MachineObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1MachineObjIdGet_3 operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdGet0Request
 */
export interface MachinesApiPartialApiV1MachineObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1MachineObjIdPatch operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdPatchRequest
 */
export interface MachinesApiPartialApiV1MachineObjIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdPatch
     */
    readonly objId: number

    /**
     * 
     * @type {MachineCreateSchema}
     * @memberof MachinesApiPartialApiV1MachineObjIdPatch
     */
    readonly machineCreateSchema: MachineCreateSchema
}

/**
 * Request parameters for partialApiV1MachineObjIdPatch_4 operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachineObjIdPatch0Request
 */
export interface MachinesApiPartialApiV1MachineObjIdPatch0Request {
    /**
     * 
     * @type {number}
     * @memberof MachinesApiPartialApiV1MachineObjIdPatch0
     */
    readonly objId: number

    /**
     * 
     * @type {MachineCreateSchema}
     * @memberof MachinesApiPartialApiV1MachineObjIdPatch0
     */
    readonly machineCreateSchema: MachineCreateSchema
}

/**
 * Request parameters for partialApiV1MachinePost operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachinePostRequest
 */
export interface MachinesApiPartialApiV1MachinePostRequest {
    /**
     * 
     * @type {MachineCreateSchema}
     * @memberof MachinesApiPartialApiV1MachinePost
     */
    readonly machineCreateSchema: MachineCreateSchema
}

/**
 * Request parameters for partialApiV1MachinePost_5 operation in MachinesApi.
 * @export
 * @interface MachinesApiPartialApiV1MachinePost0Request
 */
export interface MachinesApiPartialApiV1MachinePost0Request {
    /**
     * 
     * @type {MachineCreateSchema}
     * @memberof MachinesApiPartialApiV1MachinePost0
     */
    readonly machineCreateSchema: MachineCreateSchema
}

/**
 * MachinesApi - object-oriented interface
 * @export
 * @class MachinesApi
 * @extends {BaseAPI}
 */
export class MachinesApi extends BaseAPI {
    /**
     * Get all objects
     * @summary Get all objects
     * @param {MachinesApiPartialApiV1MachineGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineGet(requestParameters: MachinesApiPartialApiV1MachineGetRequest = {}, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineGet(requestParameters.idIn, requestParameters.geographyIdIn, requestParameters.name, requestParameters.geographyId, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {MachinesApiPartialApiV1MachineGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineGet_1(requestParameters: MachinesApiPartialApiV1MachineGet0Request = {}, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineGet_1(requestParameters.idIn, requestParameters.geographyIdIn, requestParameters.name, requestParameters.geographyId, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdDelete(requestParameters: MachinesApiPartialApiV1MachineObjIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdDelete(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdDelete0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdDelete_2(requestParameters: MachinesApiPartialApiV1MachineObjIdDelete0Request, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdDelete_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdGet(requestParameters: MachinesApiPartialApiV1MachineObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdGet_3(requestParameters: MachinesApiPartialApiV1MachineObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdGet_3(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdPatch(requestParameters: MachinesApiPartialApiV1MachineObjIdPatchRequest, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdPatch(requestParameters.objId, requestParameters.machineCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {MachinesApiPartialApiV1MachineObjIdPatch0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachineObjIdPatch_4(requestParameters: MachinesApiPartialApiV1MachineObjIdPatch0Request, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachineObjIdPatch_4(requestParameters.objId, requestParameters.machineCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {MachinesApiPartialApiV1MachinePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachinePost(requestParameters: MachinesApiPartialApiV1MachinePostRequest, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachinePost(requestParameters.machineCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {MachinesApiPartialApiV1MachinePost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApi
     */
    public partialApiV1MachinePost_5(requestParameters: MachinesApiPartialApiV1MachinePost0Request, options?: RawAxiosRequestConfig) {
        return MachinesApiFp(this.configuration).partialApiV1MachinePost_5(requestParameters.machineCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SalesApi - axios parameter creator
 * @export
 */
export const SalesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get  Average Sales Across Machines
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale/average-sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get  Average Sales Per Range
         * @param {DateRangeEnum} timeFrame 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet: async (timeFrame: DateRangeEnum, geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeFrame' is not null or undefined
            assertParamExists('getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet', 'timeFrame', timeFrame)
            const localVarPath = `/api/v1/sale/average-sales-per-range`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (timeFrame !== undefined) {
                localVarQueryParameter['time_frame'] = timeFrame;
            }

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get  Quantity By Product
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityByProductApiV1SaleQuantityByProductsGet: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale/quantity-by-products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get  Quantity Per Product
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityPerProductApiV1SaleQuantityPerProductGet: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale/quantity-per-product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get  Quantity Per Product Over Time
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale/quantity-per-product-over-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get  Sales Per Range
         * @param {DateRangeEnum} timeFrame 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesPerRangeApiV1SaleQuantityPerRangeGet: async (timeFrame: DateRangeEnum, geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeFrame' is not null or undefined
            assertParamExists('getSalesPerRangeApiV1SaleQuantityPerRangeGet', 'timeFrame', timeFrame)
            const localVarPath = `/api/v1/sale/quantity-per-range`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (timeFrame !== undefined) {
                localVarQueryParameter['time_frame'] = timeFrame;
            }

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleGet: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleGet_1: async (geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (geographyIdIn !== undefined) {
                localVarQueryParameter['geography_id__in'] = geographyIdIn;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['date_from'] = (dateFrom as any instanceof Date) ?
                    (dateFrom as any).toISOString() :
                    dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['date_to'] = (dateTo as any instanceof Date) ?
                    (dateTo as any).toISOString() :
                    dateTo;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (sourceSystemId !== undefined) {
                localVarQueryParameter['source_system_id'] = sourceSystemId;
            }

            if (productIdIn !== undefined) {
                localVarQueryParameter['product_id__in'] = productIdIn;
            }

            if (machineIdIn !== undefined) {
                localVarQueryParameter['machine_id__in'] = machineIdIn;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdDelete: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdDelete', 'objId', objId)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdDelete_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdDelete_2', 'objId', objId)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdGet_3: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdGet_3', 'objId', objId)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdPatch: async (objId: number, saleCreateSchema: SaleCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdPatch', 'objId', objId)
            // verify required parameter 'saleCreateSchema' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdPatch', 'saleCreateSchema', saleCreateSchema)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdPatch_4: async (objId: number, saleCreateSchema: SaleCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdPatch_4', 'objId', objId)
            // verify required parameter 'saleCreateSchema' is not null or undefined
            assertParamExists('partialApiV1SaleObjIdPatch_4', 'saleCreateSchema', saleCreateSchema)
            const localVarPath = `/api/v1/sale/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SalePost: async (saleCreateSchema: SaleCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleCreateSchema' is not null or undefined
            assertParamExists('partialApiV1SalePost', 'saleCreateSchema', saleCreateSchema)
            const localVarPath = `/api/v1/sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SalePost_5: async (saleCreateSchema: SaleCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleCreateSchema' is not null or undefined
            assertParamExists('partialApiV1SalePost_5', 'saleCreateSchema', saleCreateSchema)
            const localVarPath = `/api/v1/sale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesApi - functional programming interface
 * @export
 */
export const SalesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get  Average Sales Across Machines
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DecimalQuantitySchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get  Average Sales Per Range
         * @param {DateRangeEnum} timeFrame 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(timeFrame: DateRangeEnum, geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedDecimalTimeFrameSalesSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(timeFrame, geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get  Quantity By Product
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuantityByProductApiV1SaleQuantityByProductsGet(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseQuantitySchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuantityByProductApiV1SaleQuantityByProductsGet(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getQuantityByProductApiV1SaleQuantityByProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get  Quantity Per Product
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuantityPerProductApiV1SaleQuantityPerProductGet(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedCategoryProductQuantitySchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuantityPerProductApiV1SaleQuantityPerProductGet(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getQuantityPerProductApiV1SaleQuantityPerProductGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get  Quantity Per Product Over Time
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedCategoryTimeFrameSalesSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get  Sales Per Range
         * @param {DateRangeEnum} timeFrame 
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSalesPerRangeApiV1SaleQuantityPerRangeGet(timeFrame: DateRangeEnum, geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedTimeFrameSalesSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSalesPerRangeApiV1SaleQuantityPerRangeGet(timeFrame, geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.getSalesPerRangeApiV1SaleQuantityPerRangeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleGet(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedSaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleGet(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [geographyIdIn] 
         * @param {string | null} [dateFrom] 
         * @param {string | null} [dateTo] 
         * @param {number | null} [quantity] 
         * @param {number | null} [sourceSystemId] 
         * @param {string | null} [productIdIn] 
         * @param {string | null} [machineIdIn] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleGet_1(geographyIdIn?: string | null, dateFrom?: string | null, dateTo?: string | null, quantity?: number | null, sourceSystemId?: number | null, productIdIn?: string | null, machineIdIn?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedSaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleGet_1(geographyIdIn, dateFrom, dateTo, quantity, sourceSystemId, productIdIn, machineIdIn, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdDelete(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdDelete(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdDelete_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdDelete_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdDelete_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdGet_3(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdGet_3(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdGet_3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdPatch(objId: number, saleCreateSchema: SaleCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdPatch(objId, saleCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {number} objId 
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SaleObjIdPatch_4(objId: number, saleCreateSchema: SaleCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SaleObjIdPatch_4(objId, saleCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SaleObjIdPatch_4']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SalePost(saleCreateSchema: SaleCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SalePost(saleCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SalePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SaleCreateSchema} saleCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1SalePost_5(saleCreateSchema: SaleCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleDetailSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1SalePost_5(saleCreateSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.partialApiV1SalePost_5']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesApi - factory interface
 * @export
 */
export const SalesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get  Average Sales Across Machines
         * @param {SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(requestParameters: SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DecimalQuantitySchema> {
            return localVarFp.getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get  Average Sales Per Range
         * @param {SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(requestParameters: SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedDecimalTimeFrameSalesSchema> {
            return localVarFp.getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(requestParameters.timeFrame, requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get  Quantity By Product
         * @param {SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityByProductApiV1SaleQuantityByProductsGet(requestParameters: SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BaseQuantitySchema> {
            return localVarFp.getQuantityByProductApiV1SaleQuantityByProductsGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get  Quantity Per Product
         * @param {SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityPerProductApiV1SaleQuantityPerProductGet(requestParameters: SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedCategoryProductQuantitySchema> {
            return localVarFp.getQuantityPerProductApiV1SaleQuantityPerProductGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get  Quantity Per Product Over Time
         * @param {SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(requestParameters: SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedCategoryTimeFrameSalesSchema> {
            return localVarFp.getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get  Sales Per Range
         * @param {SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSalesPerRangeApiV1SaleQuantityPerRangeGet(requestParameters: SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedTimeFrameSalesSchema> {
            return localVarFp.getSalesPerRangeApiV1SaleQuantityPerRangeGet(requestParameters.timeFrame, requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {SalesApiPartialApiV1SaleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleGet(requestParameters: SalesApiPartialApiV1SaleGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedSaleDetailSchema> {
            return localVarFp.partialApiV1SaleGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {SalesApiPartialApiV1SaleGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleGet_1(requestParameters: SalesApiPartialApiV1SaleGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedSaleDetailSchema> {
            return localVarFp.partialApiV1SaleGet_1(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdDelete(requestParameters: SalesApiPartialApiV1SaleObjIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1SaleObjIdDelete(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an object
         * @summary Delete object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdDelete0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdDelete_2(requestParameters: SalesApiPartialApiV1SaleObjIdDelete0Request, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.partialApiV1SaleObjIdDelete_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdGet(requestParameters: SalesApiPartialApiV1SaleObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SaleObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdGet_3(requestParameters: SalesApiPartialApiV1SaleObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SaleObjIdGet_3(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdPatch(requestParameters: SalesApiPartialApiV1SaleObjIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SaleObjIdPatch(requestParameters.objId, requestParameters.saleCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an object
         * @summary Update object by `obj_id`
         * @param {SalesApiPartialApiV1SaleObjIdPatch0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SaleObjIdPatch_4(requestParameters: SalesApiPartialApiV1SaleObjIdPatch0Request, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SaleObjIdPatch_4(requestParameters.objId, requestParameters.saleCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SalesApiPartialApiV1SalePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SalePost(requestParameters: SalesApiPartialApiV1SalePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SalePost(requestParameters.saleCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new object
         * @summary Create object
         * @param {SalesApiPartialApiV1SalePost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1SalePost_5(requestParameters: SalesApiPartialApiV1SalePost0Request, options?: RawAxiosRequestConfig): AxiosPromise<SaleDetailSchema> {
            return localVarFp.partialApiV1SalePost_5(requestParameters.saleCreateSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet operation in SalesApi.
 * @export
 * @interface SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest
 */
export interface SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGet
     */
    readonly machineIdIn?: string | null
}

/**
 * Request parameters for getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet operation in SalesApi.
 * @export
 * @interface SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest
 */
export interface SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest {
    /**
     * 
     * @type {DateRangeEnum}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly timeFrame: DateRangeEnum

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly machineIdIn?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet
     */
    readonly size?: number
}

/**
 * Request parameters for getQuantityByProductApiV1SaleQuantityByProductsGet operation in SalesApi.
 * @export
 * @interface SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest
 */
export interface SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGet
     */
    readonly machineIdIn?: string | null
}

/**
 * Request parameters for getQuantityPerProductApiV1SaleQuantityPerProductGet operation in SalesApi.
 * @export
 * @interface SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest
 */
export interface SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly machineIdIn?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGet
     */
    readonly size?: number
}

/**
 * Request parameters for getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet operation in SalesApi.
 * @export
 * @interface SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest
 */
export interface SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly machineIdIn?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet
     */
    readonly size?: number
}

/**
 * Request parameters for getSalesPerRangeApiV1SaleQuantityPerRangeGet operation in SalesApi.
 * @export
 * @interface SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest
 */
export interface SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest {
    /**
     * 
     * @type {DateRangeEnum}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly timeFrame: DateRangeEnum

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly machineIdIn?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1SaleGet operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleGetRequest
 */
export interface SalesApiPartialApiV1SaleGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly machineIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1SaleGet_1 operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleGet0Request
 */
export interface SalesApiPartialApiV1SaleGet0Request {
    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly geographyIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly dateFrom?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly dateTo?: string | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly quantity?: number | null

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly sourceSystemId?: number | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly productIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly machineIdIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1SaleObjIdDelete operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdDeleteRequest
 */
export interface SalesApiPartialApiV1SaleObjIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdDelete
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1SaleObjIdDelete_2 operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdDelete0Request
 */
export interface SalesApiPartialApiV1SaleObjIdDelete0Request {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdDelete0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1SaleObjIdGet operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdGetRequest
 */
export interface SalesApiPartialApiV1SaleObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1SaleObjIdGet_3 operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdGet0Request
 */
export interface SalesApiPartialApiV1SaleObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1SaleObjIdPatch operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdPatchRequest
 */
export interface SalesApiPartialApiV1SaleObjIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdPatch
     */
    readonly objId: number

    /**
     * 
     * @type {SaleCreateSchema}
     * @memberof SalesApiPartialApiV1SaleObjIdPatch
     */
    readonly saleCreateSchema: SaleCreateSchema
}

/**
 * Request parameters for partialApiV1SaleObjIdPatch_4 operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SaleObjIdPatch0Request
 */
export interface SalesApiPartialApiV1SaleObjIdPatch0Request {
    /**
     * 
     * @type {number}
     * @memberof SalesApiPartialApiV1SaleObjIdPatch0
     */
    readonly objId: number

    /**
     * 
     * @type {SaleCreateSchema}
     * @memberof SalesApiPartialApiV1SaleObjIdPatch0
     */
    readonly saleCreateSchema: SaleCreateSchema
}

/**
 * Request parameters for partialApiV1SalePost operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SalePostRequest
 */
export interface SalesApiPartialApiV1SalePostRequest {
    /**
     * 
     * @type {SaleCreateSchema}
     * @memberof SalesApiPartialApiV1SalePost
     */
    readonly saleCreateSchema: SaleCreateSchema
}

/**
 * Request parameters for partialApiV1SalePost_5 operation in SalesApi.
 * @export
 * @interface SalesApiPartialApiV1SalePost0Request
 */
export interface SalesApiPartialApiV1SalePost0Request {
    /**
     * 
     * @type {SaleCreateSchema}
     * @memberof SalesApiPartialApiV1SalePost0
     */
    readonly saleCreateSchema: SaleCreateSchema
}

/**
 * SalesApi - object-oriented interface
 * @export
 * @class SalesApi
 * @extends {BaseAPI}
 */
export class SalesApi extends BaseAPI {
    /**
     * 
     * @summary Get  Average Sales Across Machines
     * @param {SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(requestParameters: SalesApiGetAverageSalesAcrossMachinesApiV1SaleAverageSalesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getAverageSalesAcrossMachinesApiV1SaleAverageSalesGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get  Average Sales Per Range
     * @param {SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(requestParameters: SalesApiGetAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGetRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getAverageSalesPerRangeApiV1SaleAverageSalesPerRangeGet(requestParameters.timeFrame, requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get  Quantity By Product
     * @param {SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getQuantityByProductApiV1SaleQuantityByProductsGet(requestParameters: SalesApiGetQuantityByProductApiV1SaleQuantityByProductsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getQuantityByProductApiV1SaleQuantityByProductsGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get  Quantity Per Product
     * @param {SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getQuantityPerProductApiV1SaleQuantityPerProductGet(requestParameters: SalesApiGetQuantityPerProductApiV1SaleQuantityPerProductGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getQuantityPerProductApiV1SaleQuantityPerProductGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get  Quantity Per Product Over Time
     * @param {SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(requestParameters: SalesApiGetQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getQuantityPerProductOverTimeApiV1SaleQuantityPerProductOverTimeGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get  Sales Per Range
     * @param {SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public getSalesPerRangeApiV1SaleQuantityPerRangeGet(requestParameters: SalesApiGetSalesPerRangeApiV1SaleQuantityPerRangeGetRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).getSalesPerRangeApiV1SaleQuantityPerRangeGet(requestParameters.timeFrame, requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {SalesApiPartialApiV1SaleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleGet(requestParameters: SalesApiPartialApiV1SaleGetRequest = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleGet(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {SalesApiPartialApiV1SaleGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleGet_1(requestParameters: SalesApiPartialApiV1SaleGet0Request = {}, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleGet_1(requestParameters.geographyIdIn, requestParameters.dateFrom, requestParameters.dateTo, requestParameters.quantity, requestParameters.sourceSystemId, requestParameters.productIdIn, requestParameters.machineIdIn, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdDelete(requestParameters: SalesApiPartialApiV1SaleObjIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdDelete(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an object
     * @summary Delete object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdDelete0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdDelete_2(requestParameters: SalesApiPartialApiV1SaleObjIdDelete0Request, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdDelete_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdGet(requestParameters: SalesApiPartialApiV1SaleObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdGet_3(requestParameters: SalesApiPartialApiV1SaleObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdGet_3(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdPatch(requestParameters: SalesApiPartialApiV1SaleObjIdPatchRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdPatch(requestParameters.objId, requestParameters.saleCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an object
     * @summary Update object by `obj_id`
     * @param {SalesApiPartialApiV1SaleObjIdPatch0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SaleObjIdPatch_4(requestParameters: SalesApiPartialApiV1SaleObjIdPatch0Request, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SaleObjIdPatch_4(requestParameters.objId, requestParameters.saleCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {SalesApiPartialApiV1SalePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SalePost(requestParameters: SalesApiPartialApiV1SalePostRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SalePost(requestParameters.saleCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new object
     * @summary Create object
     * @param {SalesApiPartialApiV1SalePost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public partialApiV1SalePost_5(requestParameters: SalesApiPartialApiV1SalePost0Request, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).partialApiV1SalePost_5(requestParameters.saleCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowMeApiV1UserMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet: async (idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['job_title'] = jobTitle;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet_1: async (idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['job_title'] = jobTitle;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1UserObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/user/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1UserObjIdGet_2', 'objId', objId)
            const localVarPath = `/api/v1/user/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserEditPatch: async (userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserApiV1UserEditPatch', 'userUpdate', userUpdate)
            const localVarPath = `/api/v1/user/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject(localVarHeaderParameter, "auth_token_stg", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowMeApiV1UserMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getShowMeApiV1UserMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserGet(idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedUserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserGet(idIn, firstname, lastname, email, companyName, jobTitle, phoneNumber, search, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserGet_1(idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedUserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserGet_1(idIn, firstname, lastname, email, companyName, jobTitle, phoneNumber, search, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserObjIdGet_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserObjIdGet_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserObjIdGet_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserApiV1UserEditPatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UserEditPatch(userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUserApiV1UserEditPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.getShowMeApiV1UserMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {UserApiPartialApiV1UserGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet(requestParameters: UserApiPartialApiV1UserGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedUserDetail> {
            return localVarFp.partialApiV1UserGet(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {UserApiPartialApiV1UserGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet_1(requestParameters: UserApiPartialApiV1UserGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedUserDetail> {
            return localVarFp.partialApiV1UserGet_1(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {UserApiPartialApiV1UserObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet(requestParameters: UserApiPartialApiV1UserObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.partialApiV1UserObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {UserApiPartialApiV1UserObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet_2(requestParameters: UserApiPartialApiV1UserObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.partialApiV1UserObjIdGet_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserApiUpdateUserApiV1UserEditPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserEditPatch(requestParameters: UserApiUpdateUserApiV1UserEditPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.updateUserApiV1UserEditPatch(requestParameters.userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partialApiV1UserGet operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserGetRequest
 */
export interface UserApiPartialApiV1UserGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly firstname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly lastname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly email?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly companyName?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly jobTitle?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly phoneNumber?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1UserGet_1 operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserGet0Request
 */
export interface UserApiPartialApiV1UserGet0Request {
    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly firstname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly lastname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly email?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly companyName?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly jobTitle?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly phoneNumber?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1UserObjIdGet operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserObjIdGetRequest
 */
export interface UserApiPartialApiV1UserObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1UserObjIdGet_2 operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserObjIdGet0Request
 */
export interface UserApiPartialApiV1UserObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for updateUserApiV1UserEditPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateUserApiV1UserEditPatchRequest
 */
export interface UserApiUpdateUserApiV1UserEditPatchRequest {
    /**
     * 
     * @type {UserUpdate}
     * @memberof UserApiUpdateUserApiV1UserEditPatch
     */
    readonly userUpdate: UserUpdate
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Retrieve the User by ID.  - **user_id**: User ID
     * @summary Get  Show Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getShowMeApiV1UserMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {UserApiPartialApiV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserGet(requestParameters: UserApiPartialApiV1UserGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserGet(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {UserApiPartialApiV1UserGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserGet_1(requestParameters: UserApiPartialApiV1UserGet0Request = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserGet_1(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {UserApiPartialApiV1UserObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserObjIdGet(requestParameters: UserApiPartialApiV1UserObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {UserApiPartialApiV1UserObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserObjIdGet_2(requestParameters: UserApiPartialApiV1UserObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserObjIdGet_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the User by Provided `UserUpdate` object.
     * @summary Update  User
     * @param {UserApiUpdateUserApiV1UserEditPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserApiV1UserEditPatch(requestParameters: UserApiUpdateUserApiV1UserEditPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserApiV1UserEditPatch(requestParameters.userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



