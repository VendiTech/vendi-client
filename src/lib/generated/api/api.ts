/* tslint:disable */
/* eslint-disable */
/**
 * Vendi Backend. Environment: STG
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BodyResetForgotPasswordApiAuthForgotPasswordPost
 */
export interface BodyResetForgotPasswordApiAuthForgotPasswordPost {
    /**
     * 
     * @type {string}
     * @memberof BodyResetForgotPasswordApiAuthForgotPasswordPost
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface BodyResetResetPasswordApiAuthResetPasswordPost
 */
export interface BodyResetResetPasswordApiAuthResetPasswordPost {
    /**
     * 
     * @type {string}
     * @memberof BodyResetResetPasswordApiAuthResetPasswordPost
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof BodyResetResetPasswordApiAuthResetPasswordPost
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
 */
export interface BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost {
    /**
     * 
     * @type {string}
     * @memberof BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface BodyVerifyVerifyApiAuthVerifyPost
 */
export interface BodyVerifyVerifyApiAuthVerifyPost {
    /**
     * 
     * @type {string}
     * @memberof BodyVerifyVerifyApiAuthVerifyPost
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface Detail
 */
export interface Detail {
}
/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {Detail}
     * @memberof ErrorModel
     */
    'detail': Detail;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HealthCheckSchema
 */
export interface HealthCheckSchema {
    /**
     * 
     * @type {HealthCheckStatusEnum}
     * @memberof HealthCheckSchema
     */
    'status': HealthCheckStatusEnum;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const HealthCheckStatusEnum = {
    Success: 'Success',
    Failure: 'Failure'
} as const;

export type HealthCheckStatusEnum = typeof HealthCheckStatusEnum[keyof typeof HealthCheckStatusEnum];


/**
 * 
 * @export
 * @interface PageCustomizedUserDetail
 */
export interface PageCustomizedUserDetail {
    /**
     * 
     * @type {Array<UserDetail>}
     * @memberof PageCustomizedUserDetail
     */
    'items': Array<UserDetail>;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'total': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'page': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'size': number | null;
    /**
     * 
     * @type {number}
     * @memberof PageCustomizedUserDetail
     */
    'pages'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    Admin: 'admin',
    User: 'user'
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * This enum represents every account\'s status.
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Active: 'ACTIVE',
    Suspended: 'SUSPENDED',
    Deleted: 'DELETED'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'phone_number'?: string | null;
}
/**
 * 
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserDetail
     */
    'id': number;
    /**
     * 
     * @type {StatusEnum}
     * @memberof UserDetail
     */
    'status': StatusEnum;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserDetail
     */
    'role': RoleEnum;
}


/**
 * 
 * @export
 * @interface UserLoginSchema
 */
export interface UserLoginSchema {
    /**
     * 
     * @type {string}
     * @memberof UserLoginSchema
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginSchema
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'firstname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'lastname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'company_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'phone_number'?: string | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AuthLoginApi - axios parameter creator
 * @export
 */
export const AuthLoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {UserLoginSchema} userLoginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLoginApiAuthLoginPost: async (userLoginSchema: UserLoginSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginSchema' is not null or undefined
            assertParamExists('authJwtLoginApiAuthLoginPost', 'userLoginSchema', userLoginSchema)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLogoutApiAuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyCookie required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthLoginApi - functional programming interface
 * @export
 */
export const AuthLoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthLoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {UserLoginSchema} userLoginSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authJwtLoginApiAuthLoginPost(userLoginSchema: UserLoginSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authJwtLoginApiAuthLoginPost(userLoginSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthLoginApi.authJwtLoginApiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authJwtLogoutApiAuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthLoginApi.authJwtLogoutApiAuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthLoginApi - factory interface
 * @export
 */
export const AuthLoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthLoginApiFp(configuration)
    return {
        /**
         * 
         * @summary Auth:Jwt.Login
         * @param {AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLoginApiAuthLoginPost(requestParameters: AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.authJwtLoginApiAuthLoginPost(requestParameters.userLoginSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auth:Jwt.Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.authJwtLogoutApiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authJwtLoginApiAuthLoginPost operation in AuthLoginApi.
 * @export
 * @interface AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest
 */
export interface AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest {
    /**
     * 
     * @type {UserLoginSchema}
     * @memberof AuthLoginApiAuthJwtLoginApiAuthLoginPost
     */
    readonly userLoginSchema: UserLoginSchema
}

/**
 * AuthLoginApi - object-oriented interface
 * @export
 * @class AuthLoginApi
 * @extends {BaseAPI}
 */
export class AuthLoginApi extends BaseAPI {
    /**
     * 
     * @summary Auth:Jwt.Login
     * @param {AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthLoginApi
     */
    public authJwtLoginApiAuthLoginPost(requestParameters: AuthLoginApiAuthJwtLoginApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthLoginApiFp(this.configuration).authJwtLoginApiAuthLoginPost(requestParameters.userLoginSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auth:Jwt.Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthLoginApi
     */
    public authJwtLogoutApiAuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthLoginApiFp(this.configuration).authJwtLogoutApiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthRegisterApi - axios parameter creator
 * @export
 */
export const AuthRegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register:Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterApiAuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerRegisterApiAuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthRegisterApi - functional programming interface
 * @export
 */
export const AuthRegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthRegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register:Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerRegisterApiAuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerRegisterApiAuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthRegisterApi.registerRegisterApiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthRegisterApi - factory interface
 * @export
 */
export const AuthRegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthRegisterApiFp(configuration)
    return {
        /**
         * 
         * @summary Register:Register
         * @param {AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerRegisterApiAuthRegisterPost(requestParameters: AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.registerRegisterApiAuthRegisterPost(requestParameters.userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registerRegisterApiAuthRegisterPost operation in AuthRegisterApi.
 * @export
 * @interface AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest
 */
export interface AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest {
    /**
     * 
     * @type {UserCreate}
     * @memberof AuthRegisterApiRegisterRegisterApiAuthRegisterPost
     */
    readonly userCreate: UserCreate
}

/**
 * AuthRegisterApi - object-oriented interface
 * @export
 * @class AuthRegisterApi
 * @extends {BaseAPI}
 */
export class AuthRegisterApi extends BaseAPI {
    /**
     * 
     * @summary Register:Register
     * @param {AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthRegisterApi
     */
    public registerRegisterApiAuthRegisterPost(requestParameters: AuthRegisterApiRegisterRegisterApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthRegisterApiFp(this.configuration).registerRegisterApiAuthRegisterPost(requestParameters.userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthResetPasswordApi - axios parameter creator
 * @export
 */
export const AuthResetPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {BodyResetForgotPasswordApiAuthForgotPasswordPost} bodyResetForgotPasswordApiAuthForgotPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetForgotPasswordApiAuthForgotPasswordPost: async (bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyResetForgotPasswordApiAuthForgotPasswordPost' is not null or undefined
            assertParamExists('resetForgotPasswordApiAuthForgotPasswordPost', 'bodyResetForgotPasswordApiAuthForgotPasswordPost', bodyResetForgotPasswordApiAuthForgotPasswordPost)
            const localVarPath = `/api/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyResetForgotPasswordApiAuthForgotPasswordPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {BodyResetResetPasswordApiAuthResetPasswordPost} bodyResetResetPasswordApiAuthResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetResetPasswordApiAuthResetPasswordPost: async (bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyResetResetPasswordApiAuthResetPasswordPost' is not null or undefined
            assertParamExists('resetResetPasswordApiAuthResetPasswordPost', 'bodyResetResetPasswordApiAuthResetPasswordPost', bodyResetResetPasswordApiAuthResetPasswordPost)
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyResetResetPasswordApiAuthResetPasswordPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthResetPasswordApi - functional programming interface
 * @export
 */
export const AuthResetPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthResetPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {BodyResetForgotPasswordApiAuthForgotPasswordPost} bodyResetForgotPasswordApiAuthForgotPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetForgotPasswordApiAuthForgotPasswordPost(bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetForgotPasswordApiAuthForgotPasswordPost(bodyResetForgotPasswordApiAuthForgotPasswordPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthResetPasswordApi.resetForgotPasswordApiAuthForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {BodyResetResetPasswordApiAuthResetPasswordPost} bodyResetResetPasswordApiAuthResetPasswordPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetResetPasswordApiAuthResetPasswordPost(bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetResetPasswordApiAuthResetPasswordPost(bodyResetResetPasswordApiAuthResetPasswordPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthResetPasswordApi.resetResetPasswordApiAuthResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthResetPasswordApi - factory interface
 * @export
 */
export const AuthResetPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthResetPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Reset:Forgot Password
         * @param {AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetForgotPasswordApiAuthForgotPasswordPost(requestParameters: AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetForgotPasswordApiAuthForgotPasswordPost(requestParameters.bodyResetForgotPasswordApiAuthForgotPasswordPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset:Reset Password
         * @param {AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetResetPasswordApiAuthResetPasswordPost(requestParameters: AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetResetPasswordApiAuthResetPasswordPost(requestParameters.bodyResetResetPasswordApiAuthResetPasswordPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for resetForgotPasswordApiAuthForgotPasswordPost operation in AuthResetPasswordApi.
 * @export
 * @interface AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest
 */
export interface AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {BodyResetForgotPasswordApiAuthForgotPasswordPost}
     * @memberof AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPost
     */
    readonly bodyResetForgotPasswordApiAuthForgotPasswordPost: BodyResetForgotPasswordApiAuthForgotPasswordPost
}

/**
 * Request parameters for resetResetPasswordApiAuthResetPasswordPost operation in AuthResetPasswordApi.
 * @export
 * @interface AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest
 */
export interface AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {BodyResetResetPasswordApiAuthResetPasswordPost}
     * @memberof AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPost
     */
    readonly bodyResetResetPasswordApiAuthResetPasswordPost: BodyResetResetPasswordApiAuthResetPasswordPost
}

/**
 * AuthResetPasswordApi - object-oriented interface
 * @export
 * @class AuthResetPasswordApi
 * @extends {BaseAPI}
 */
export class AuthResetPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Reset:Forgot Password
     * @param {AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthResetPasswordApi
     */
    public resetForgotPasswordApiAuthForgotPasswordPost(requestParameters: AuthResetPasswordApiResetForgotPasswordApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthResetPasswordApiFp(this.configuration).resetForgotPasswordApiAuthForgotPasswordPost(requestParameters.bodyResetForgotPasswordApiAuthForgotPasswordPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset:Reset Password
     * @param {AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthResetPasswordApi
     */
    public resetResetPasswordApiAuthResetPasswordPost(requestParameters: AuthResetPasswordApiResetResetPasswordApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthResetPasswordApiFp(this.configuration).resetResetPasswordApiAuthResetPasswordPost(requestParameters.bodyResetResetPasswordApiAuthResetPasswordPost, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthVerifyApi - axios parameter creator
 * @export
 */
export const AuthVerifyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost} bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRequestTokenApiAuthRequestVerifyTokenPost: async (bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost' is not null or undefined
            assertParamExists('verifyRequestTokenApiAuthRequestVerifyTokenPost', 'bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost', bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost)
            const localVarPath = `/api/auth/request-verify-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {BodyVerifyVerifyApiAuthVerifyPost} bodyVerifyVerifyApiAuthVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyVerifyApiAuthVerifyPost: async (bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyVerifyVerifyApiAuthVerifyPost' is not null or undefined
            assertParamExists('verifyVerifyApiAuthVerifyPost', 'bodyVerifyVerifyApiAuthVerifyPost', bodyVerifyVerifyApiAuthVerifyPost)
            const localVarPath = `/api/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyVerifyVerifyApiAuthVerifyPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthVerifyApi - functional programming interface
 * @export
 */
export const AuthVerifyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthVerifyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost} bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyRequestTokenApiAuthRequestVerifyTokenPost(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyRequestTokenApiAuthRequestVerifyTokenPost(bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthVerifyApi.verifyRequestTokenApiAuthRequestVerifyTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {BodyVerifyVerifyApiAuthVerifyPost} bodyVerifyVerifyApiAuthVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyVerifyApiAuthVerifyPost(bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyVerifyApiAuthVerifyPost(bodyVerifyVerifyApiAuthVerifyPost, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthVerifyApi.verifyVerifyApiAuthVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthVerifyApi - factory interface
 * @export
 */
export const AuthVerifyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthVerifyApiFp(configuration)
    return {
        /**
         * 
         * @summary Verify:Request-Token
         * @param {AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters: AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters.bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify:Verify
         * @param {AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyVerifyApiAuthVerifyPost(requestParameters: AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.verifyVerifyApiAuthVerifyPost(requestParameters.bodyVerifyVerifyApiAuthVerifyPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verifyRequestTokenApiAuthRequestVerifyTokenPost operation in AuthVerifyApi.
 * @export
 * @interface AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest
 */
export interface AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest {
    /**
     * 
     * @type {BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost}
     * @memberof AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPost
     */
    readonly bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost: BodyVerifyRequestTokenApiAuthRequestVerifyTokenPost
}

/**
 * Request parameters for verifyVerifyApiAuthVerifyPost operation in AuthVerifyApi.
 * @export
 * @interface AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest
 */
export interface AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest {
    /**
     * 
     * @type {BodyVerifyVerifyApiAuthVerifyPost}
     * @memberof AuthVerifyApiVerifyVerifyApiAuthVerifyPost
     */
    readonly bodyVerifyVerifyApiAuthVerifyPost: BodyVerifyVerifyApiAuthVerifyPost
}

/**
 * AuthVerifyApi - object-oriented interface
 * @export
 * @class AuthVerifyApi
 * @extends {BaseAPI}
 */
export class AuthVerifyApi extends BaseAPI {
    /**
     * 
     * @summary Verify:Request-Token
     * @param {AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthVerifyApi
     */
    public verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters: AuthVerifyApiVerifyRequestTokenApiAuthRequestVerifyTokenPostRequest, options?: RawAxiosRequestConfig) {
        return AuthVerifyApiFp(this.configuration).verifyRequestTokenApiAuthRequestVerifyTokenPost(requestParameters.bodyVerifyRequestTokenApiAuthRequestVerifyTokenPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify:Verify
     * @param {AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthVerifyApi
     */
    public verifyVerifyApiAuthVerifyPost(requestParameters: AuthVerifyApiVerifyVerifyApiAuthVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return AuthVerifyApiFp(this.configuration).verifyVerifyApiAuthVerifyPost(requestParameters.bodyVerifyVerifyApiAuthVerifyPost, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performHealthcheckApiHealthCheckGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health-check/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performHealthcheckApiHealthCheckGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthCheckApi.performHealthcheckApiHealthCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthCheckApiFp(configuration)
    return {
        /**
         * 
         * @summary Perform Healthcheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckSchema> {
            return localVarFp.performHealthcheckApiHealthCheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI {
    /**
     * 
     * @summary Perform Healthcheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public performHealthcheckApiHealthCheckGet(options?: RawAxiosRequestConfig) {
        return HealthCheckApiFp(this.configuration).performHealthcheckApiHealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowMeApiV1UserMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet: async (idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['job_title'] = jobTitle;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet_1: async (idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (idIn !== undefined) {
                localVarQueryParameter['id__in'] = idIn;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (companyName !== undefined) {
                localVarQueryParameter['company_name'] = companyName;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['job_title'] = jobTitle;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phone_number'] = phoneNumber;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1UserObjIdGet', 'objId', objId)
            const localVarPath = `/api/v1/user/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet_2: async (objId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objId' is not null or undefined
            assertParamExists('partialApiV1UserObjIdGet_2', 'objId', objId)
            const localVarPath = `/api/v1/user/{obj_id}`
                .replace(`{${"obj_id"}}`, encodeURIComponent(String(objId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserEditPatch: async (userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserApiV1UserEditPatch', 'userUpdate', userUpdate)
            const localVarPath = `/api/v1/user/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowMeApiV1UserMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getShowMeApiV1UserMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserGet(idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedUserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserGet(idIn, firstname, lastname, email, companyName, jobTitle, phoneNumber, search, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {string | null} [idIn] 
         * @param {string | null} [firstname] 
         * @param {string | null} [lastname] 
         * @param {string | null} [email] 
         * @param {string | null} [companyName] 
         * @param {string | null} [jobTitle] 
         * @param {string | null} [phoneNumber] 
         * @param {string | null} [search] 
         * @param {string | null} [orderBy] 
         * @param {number} [page] Page number
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserGet_1(idIn?: string | null, firstname?: string | null, lastname?: string | null, email?: string | null, companyName?: string | null, jobTitle?: string | null, phoneNumber?: string | null, search?: string | null, orderBy?: string | null, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageCustomizedUserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserGet_1(idIn, firstname, lastname, email, companyName, jobTitle, phoneNumber, search, orderBy, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserGet_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserObjIdGet(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserObjIdGet(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserObjIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {number} objId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialApiV1UserObjIdGet_2(objId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialApiV1UserObjIdGet_2(objId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.partialApiV1UserObjIdGet_2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserApiV1UserEditPatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UserEditPatch(userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUserApiV1UserEditPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Retrieve the User by ID.  - **user_id**: User ID
         * @summary Get  Show Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.getShowMeApiV1UserMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {UserApiPartialApiV1UserGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet(requestParameters: UserApiPartialApiV1UserGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedUserDetail> {
            return localVarFp.partialApiV1UserGet(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all objects
         * @summary Get all objects
         * @param {UserApiPartialApiV1UserGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserGet_1(requestParameters: UserApiPartialApiV1UserGet0Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageCustomizedUserDetail> {
            return localVarFp.partialApiV1UserGet_1(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {UserApiPartialApiV1UserObjIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet(requestParameters: UserApiPartialApiV1UserObjIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.partialApiV1UserObjIdGet(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single object
         * @summary Get object by `obj_id`
         * @param {UserApiPartialApiV1UserObjIdGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialApiV1UserObjIdGet_2(requestParameters: UserApiPartialApiV1UserObjIdGet0Request, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.partialApiV1UserObjIdGet_2(requestParameters.objId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the User by Provided `UserUpdate` object.
         * @summary Update  User
         * @param {UserApiUpdateUserApiV1UserEditPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserEditPatch(requestParameters: UserApiUpdateUserApiV1UserEditPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetail> {
            return localVarFp.updateUserApiV1UserEditPatch(requestParameters.userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for partialApiV1UserGet operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserGetRequest
 */
export interface UserApiPartialApiV1UserGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly firstname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly lastname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly email?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly companyName?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly jobTitle?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly phoneNumber?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1UserGet_1 operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserGet0Request
 */
export interface UserApiPartialApiV1UserGet0Request {
    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly idIn?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly firstname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly lastname?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly email?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly companyName?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly jobTitle?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly phoneNumber?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly search?: string | null

    /**
     * 
     * @type {string}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly orderBy?: string | null

    /**
     * Page number
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserGet0
     */
    readonly size?: number
}

/**
 * Request parameters for partialApiV1UserObjIdGet operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserObjIdGetRequest
 */
export interface UserApiPartialApiV1UserObjIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserObjIdGet
     */
    readonly objId: number
}

/**
 * Request parameters for partialApiV1UserObjIdGet_2 operation in UserApi.
 * @export
 * @interface UserApiPartialApiV1UserObjIdGet0Request
 */
export interface UserApiPartialApiV1UserObjIdGet0Request {
    /**
     * 
     * @type {number}
     * @memberof UserApiPartialApiV1UserObjIdGet0
     */
    readonly objId: number
}

/**
 * Request parameters for updateUserApiV1UserEditPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateUserApiV1UserEditPatchRequest
 */
export interface UserApiUpdateUserApiV1UserEditPatchRequest {
    /**
     * 
     * @type {UserUpdate}
     * @memberof UserApiUpdateUserApiV1UserEditPatch
     */
    readonly userUpdate: UserUpdate
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Retrieve the User by ID.  - **user_id**: User ID
     * @summary Get  Show Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getShowMeApiV1UserMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getShowMeApiV1UserMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {UserApiPartialApiV1UserGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserGet(requestParameters: UserApiPartialApiV1UserGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserGet(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all objects
     * @summary Get all objects
     * @param {UserApiPartialApiV1UserGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserGet_1(requestParameters: UserApiPartialApiV1UserGet0Request = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserGet_1(requestParameters.idIn, requestParameters.firstname, requestParameters.lastname, requestParameters.email, requestParameters.companyName, requestParameters.jobTitle, requestParameters.phoneNumber, requestParameters.search, requestParameters.orderBy, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {UserApiPartialApiV1UserObjIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserObjIdGet(requestParameters: UserApiPartialApiV1UserObjIdGetRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserObjIdGet(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single object
     * @summary Get object by `obj_id`
     * @param {UserApiPartialApiV1UserObjIdGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public partialApiV1UserObjIdGet_2(requestParameters: UserApiPartialApiV1UserObjIdGet0Request, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).partialApiV1UserObjIdGet_2(requestParameters.objId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the User by Provided `UserUpdate` object.
     * @summary Update  User
     * @param {UserApiUpdateUserApiV1UserEditPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserApiV1UserEditPatch(requestParameters: UserApiUpdateUserApiV1UserEditPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserApiV1UserEditPatch(requestParameters.userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



